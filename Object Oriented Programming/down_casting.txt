### Downcasting

### 1Ô∏è‚É£ **Definition of Downcasting**

* **Downcasting** is converting a **base class pointer/reference** to a **derived class pointer/reference**.
* This is the opposite of upcasting.
* Example:

```cpp
Base* bp = new Derived();  // upcast, implicit
Derived* dp = static_cast<Derived*>(bp);  // downcast, explicit
```

* Here `bp` points to a `Derived` object, but its type is `Base*`.
* We **explicitly tell the compiler** ‚ÄúI know this Base* actually points to a Derived, treat it as Derived*.‚Äù

---

### 2Ô∏è‚É£ **Rules**

1. **Downcasting must be explicit**:
   C++ won‚Äôt allow implicit conversion from `Base*` ‚Üí `Derived*`.

   ```cpp
   Derived* dp = bp; // ‚ùå ERROR
   ```

2. **Use `static_cast`** if you are certain about the type at compile time.

3. **Use `dynamic_cast`** if you want runtime checking (safe).

```cpp
Derived* dp = dynamic_cast<Derived*>(bp);
if (dp) {
    dp->derivedFunction();
} else {
    // bp was not actually pointing to a Derived object
}
```

* `dynamic_cast` works **only if the base class has at least one virtual function**.
* It checks the **actual object type** at runtime before converting.

---

### 3Ô∏è‚É£ **Risks**

* Downcasting is **dangerous** if the object is not actually a Derived.
* It can lead to **undefined behavior** if you call members that only exist in Derived.

---

### 4Ô∏è‚É£ **Summary Table**

| Casting     | Pointer type   | Safe?             | Compile-time check | Runtime check               |
| ----------- | -------------- | ----------------- | ------------------ | --------------------------- |
| Upcasting   | Derived ‚Üí Base | ‚úÖ Always safe     | ‚úÖ Implicit         | N/A                         |
| Downcasting | Base ‚Üí Derived | ‚ùå Only if correct | ‚ùå Needs cast       | ‚úÖ Optional (`dynamic_cast`) |

---

üí° **Key idea:**

* **Upcast** = safe, implicit, Base pointer sees only Base interface.
* **Downcast** = potentially unsafe, explicit, you‚Äôre telling compiler ‚Äútrust me, it‚Äôs Derived.‚Äù


